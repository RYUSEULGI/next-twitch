// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User{
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?

  follwing        Follow[]  @relation("Following")
  followedBy      Follow[]  @relation("FollowedBy")

  blocking        Block[]   @relation("Blocking")
  blockedBy       Block[]   @relation("BlockedBy")

  Subscribing     Subscribe[]   @relation("Subscribing")
  SubscribedBy    Subscribe[]   @relation("SubscribedBy")

  stream          Stream?

  accounts        Account[]
  sessions        Session[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Stream{
  id                    String    @id @default(uuid())
  name                  String    @db.Text
  thumbnailUrl          String?   @db.Text
  
  ingressId             String?   @unique
  serverUrl             String?   @db.Text
  streamKey             String?   @db.Text

  isLive                Boolean   @default(false)
  isChatEnabled         Boolean   @default(true)
  isChatDelayed         Boolean   @default(false)
  isChatFollowersOnly   Boolean   @default(false)

  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([userId])
  @@index([ingressId])
  @@fulltext([name])
}

model Follow{
  id              String    @id @default(uuid())
  followerId      String
  followingId     String

  follower        User      @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following       User      @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block{
  id              String    @id @default(uuid())
  blockerId       String
  blockedId       String

  blocker         User      @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked         User      @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Subscribe{
  id              String    @id @default(uuid())
  subscriberId    String
  subscribedId    String

  subscriber      User      @relation(name: "Subscribing", fields: [subscriberId], references: [id], onDelete: Cascade)
  subscribed      User      @relation(name: "SubscribedBy", fields: [subscribedId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([subscriberId, subscribedId])
  @@index([subscriberId])
  @@index([subscribedId])
}
